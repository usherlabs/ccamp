{
  "language": "Solidity",
  "sources": {
    "contracts/WasteGas.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\n// Flashbots currently enforces a gas used floor. As of August 2021, that value is 42,000 gas. Any transaction that consumes less than this floor is rejected by relay\n// This contract enables testing Flashbots with a single, simple transaction that will consume transaction's gas limit, ensuring the bundle won't be rejected\n// See: https://docs.flashbots.net/flashbots-auction/searchers/advanced/bundle-pricing\n\ncontract WasteGas {\n    uint256 public count;\n\n    receive() external payable {}\n\n    function contractEth(uint256 priorityFee) external {\n        uint256 gasUsed = mockService();\n\n        uint256 fee = (block.basefee + priorityFee) * tx.gasprice * gasUsed;\n\n        block.coinbase.call{value: fee}(new bytes(0));\n    }\n\n    function senderEth() external payable {\n        mockService();\n\n        block.coinbase.call{value: msg.value}(new bytes(0));\n    }\n\n    function mockService() internal returns (uint256 gasUsed) {\n        uint256 gasBefore = gasleft();\n\n        count += 1;\n\n        while (gasUsed < 42_000) {\n            gasUsed = gasBefore - gasleft();\n        }\n\n        return gasUsed;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}